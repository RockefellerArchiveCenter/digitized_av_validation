name: Build and Deploy

on:
  push:
    branches:
      - development
      - base
  pull_request:
    branches:
      - development
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    environment:
      name: development

    env:
      APP_NAME: digitized_av_validation

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          echo "DATE=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV
          echo "TARGET_IMAGE_LATEST=${{ secrets.TARGET_IMAGE }}:latest" >> $GITHUB_ENV
          echo "TARGET_IMAGE_DEV=${{ secrets.TARGET_IMAGE }}:dev" >> $GITHUB_ENV
          echo "TARGET_IMAGE_VERSIONED=${{ secrets.TARGET_IMAGE }}:${{ env.DATE }}-${{ github.sha }}" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE }}
          role-skip-session-tagging: true
          role-duration-seconds: 1000
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build Docker image
        run: |
          docker build -t ${{ env.APP_NAME }} --target build .

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1
        with:
          registries: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Tag and push latest to ECR
        run: |
          docker tag ${{ env.APP_NAME }} ${{ env.TARGET_IMAGE_LATEST }}
          docker push ${{ env.TARGET_IMAGE_LATEST }}

      - name: Tag and push dev to ECR
        run: |
          docker tag ${{ env.APP_NAME }} ${{ env.TARGET_IMAGE_DEV }}
          docker push ${{ env.TARGET_IMAGE_DEV }}

      - name: Tag and push versioned image to ECR
        run: |
          docker tag ${{ env.APP_NAME }} ${{ env.TARGET_IMAGE_VERSIONED }}
          docker push ${TARGET_IMAGE_VERSIONED}

      - name: Tag image for production (base branch)
        if: github.ref == 'refs/heads/base'
        run: |
          echo "MANIFEST=aws ecr batch-get-image --repository-name ${{ env.APP_NAME }} --image-ids imageTag=dev --output json | jq --raw-output --join-output '.images[0].imageManifest')" >> $GITHUB_ENV
          aws ecr put-image --repository-name ${{ env.APP_NAME }} --image-tag prod --image-manifest ${{ env.MANIFEST }}
